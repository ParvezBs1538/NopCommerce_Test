@model QuoteFormModel
@using Nop.Core.Domain.Media
@using System.Text
@using Nop.Services.Catalog
@using Nop.Services.Media
@inject IDownloadService downloadService
@inject QuoteCartSettings quoteCartSettings

<div class="page quote-form-container">
    <div class="page-title">
        <h1>@Model.Title</h1>
    </div>
    <div class="page-body">
        <div id="result-@Model.Id" class="result"></div>
        <form id="DynamicQuoteForm-@Model.Id">
            @Html.AntiForgeryToken()
            <div class="fieldset">
                @if (!string.IsNullOrEmpty(Model.Info))
                {
                    <div class="full-description">
                        @Html.Raw(Model.Info)
                    </div>
                }

                <div class="form-fields attributes">
                    <div id="error-@Model.Id" class="error"></div>
                    <dl>
                        @if (Model.ShowGuestEmailField)
                        {
                            <dt id="@($"{QuoteCartDefaults.FormFieldPrefix}label_guestEmail")">
                                <label class="text-prompt" for="GuestEmail">@T("NopStation.Plugin.Misc.QuoteCart.QuoteForm.Fields.GuestEmail"):</label>
                                <span class="required">*</span>
                            </dt>
                            <dd>
                                <input name="GuestEmail" type="email" class="textbox" id="@Html.IdFor(x => x.GuestEmail)" />
                            </dd>
                        }
                        @foreach (var attribute in Model.QuoteFormAttributes)
                        {
                            var controlId = $"{QuoteCartDefaults.FormFieldPrefix}{attribute.Id}";
                            var textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;

                            <dt id="@($"{QuoteCartDefaults.FormFieldPrefix}label_{attribute.Id}")">
                                <label class="text-prompt" for="@controlId">@textPrompt:</label>
                                @if (attribute.IsRequired)
                                {
                                    <span class="required">*</span>
                                }
                                @if (!string.IsNullOrEmpty(attribute.Description))
                                {
                                    <div class="attribute-description">
                                        @Html.Raw(attribute.Description)
                                    </div>
                                }
                            </dt>
                            <dd id="@($"{QuoteCartDefaults.FormFieldPrefix}inputwrap_{attribute.Id}")" class="form-attribute-@(attribute.AttributeControlType.ToString().ToLower())">

                                @switch (attribute.AttributeControlType)
                                {
                                    case AttributeControlType.DropdownList:
                                        {
                                            <select data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)">
                                                <option value="0">@T("NopStation.Plugin.Misc.QuoteCart.FormAttributes.DropdownList.DefaultItem")</option>
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    <option data-attr-value="@attributeValue.Id" selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                                                }
                                            </select>
                                        }
                                        break;
                                    case AttributeControlType.RadioList:
                                        {
                                            <ul data-attr="@(attribute.Id)" class="option-list">
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    <li data-attr-value="@attributeValue.Id">
                                                        <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                                        <label for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                        break;
                                    case AttributeControlType.Checkboxes:
                                    case AttributeControlType.ReadonlyCheckboxes:
                                        {
                                            <ul @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr=" + attribute.Id) : null) class="option-list">
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    <li @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr-value=" + attributeValue.Id) : null)>
                                                        <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                                        <label for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                        break;
                                    case AttributeControlType.TextBox:
                                        {
                                            <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)" />
                                        }
                                        break;
                                    case AttributeControlType.MultilineTextbox:
                                        {
                                            <textarea cols="20" id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
                                        }
                                        break;
                                    case AttributeControlType.Datepicker:
                                        {
                                            var beginYear = attribute.ValidationMinDate.HasValue ? attribute.ValidationMinDate : attribute.ValidationMaxDate.HasValue ? attribute.ValidationMaxDate.Value.AddYears(-100) : DateTime.UtcNow;
                                            var endYear = attribute.ValidationMaxDate.HasValue ? attribute.ValidationMaxDate : attribute.ValidationMinDate.HasValue ? attribute.ValidationMinDate.Value.AddYears(100) : DateTime.UtcNow.AddYears(100);
                                            <nop-date-picker asp-day-name="@(controlId + "_day")"
                                             asp-month-name="@(controlId + "_month")"
                                             asp-year-name="@(controlId + "_year")"
                                             asp-begin-year="@(endYear)"
                                             asp-end-year="@(beginYear)"
                                             asp-selected-date="@CommonHelper.ParseDate(attribute.SelectedYear, attribute.SelectedMonth, attribute.SelectedDay)" />
                                        }
                                        break;
                                    case AttributeControlType.FileUpload:
                                        {
                                            Download download = null;
                                            if (!string.IsNullOrEmpty(attribute.DefaultValue))
                                            {
                                                download = await downloadService.GetDownloadByGuidAsync(new Guid(attribute.DefaultValue));
                                            }

                                            @* register CSS and JS *@
                                            <link rel="stylesheet" href="~/lib_npm/fine-uploader/fine-uploader/fine-uploader.min.css" />
                                            <script asp-exclude-from-bundle="true" src="~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js" asp-location="Footer"></script>

                                            //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                                            var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                                            @*fine uploader container*@
                                            <div id="@(controlId)uploader" class="qq-uploader"></div>
                                            @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                                            <script type="text/template" asp-location="Footer" id="@(controlId)-qq-template">
                                                <div class="qq-uploader-selector qq-uploader">
                                                    <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                                        <span>@T("Common.FileUploader.DropFiles")</span>
                                                    </div>
                                                    <div class="qq-upload-button-selector qq-upload-button">
                                                        <div>@T("Common.FileUploader.Upload")</div>
                                                    </div>
                                                    <span class="qq-drop-processing-selector qq-drop-processing">
                                                        <span>@T("Common.FileUploader.Processing")</span>
                                                        <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                                    </span>
                                                    <ul class="qq-upload-list-selector qq-upload-list">
                                                        <li>
                                                            <div class="qq-progress-bar-container-selector">
                                                                <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                            </div>
                                                            <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                            <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                            <span class="qq-upload-file-selector qq-upload-file"></span>
                                                            <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                            <span class="qq-upload-size-selector qq-upload-size"></span>
                                                            <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                            <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                            <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                            <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </script>
                                            <script asp-location="Footer">
                                                $(function () {
                                                    $("#@(controlId)uploader").fineUploader({
                                                        request: {
                                                            endpoint: '@(Url.RouteUrl("QuoteCart.UploadFileFormAttribute", new { attributeId = attribute.Id }))'
                                                        },
                                                        template: "@(controlId)-qq-template",
                                                        multiple: false,
                                                        validation: {
                                                            allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                                        }
                                                    }).on("complete", function (event, id, name, responseJSON, xhr) {
                                                        $("#@(controlId)").val(responseJSON.downloadGuid);
                                                        if (responseJSON.success) {
                                                            $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                                            $("#@(controlId + "remove")").show();
                                                        }
                                                        if (responseJSON.message) {
                                                            alert(responseJSON.message);
                                                        }
                                                    });

                                                    $("#@(controlId + "remove")").on('click', function (e) {
                                                        $("#@(controlId + "downloadurl")").html("");
                                                        $("#@(controlId)").val('');
                                                        $(this).hide();
                                                    });
                                                });
                                            </script>
                                            <div id="@(controlId + "downloadurl")" class="qq-download-url">
                                                @if (download != null)
                                                {
                                                    <a href="@(Url.Action("GetFileUpload", "Download", new {downloadId = download.DownloadGuid}))" class="download-uploaded-file">@T("Common.FileUploader.DownloadUploadedFile")</a>
                                                    <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid" />
                                                }
                                                else { }
                                            </div>
                                            <div>
                                                @if (download != null)
                                                {
                                                    <a id="@(controlId + "remove")" class="remove-download-button">@T("Common.FileUploader.RemoveDownload")</a>
                                                }
                                                else
                                                {
                                                    <a id="@(controlId + "remove")" class="remove-download-button" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>

                                                    <input id="@(controlId)" name="@(controlId)" type="hidden" />
                                                }
                                            </div>
                                        }
                                        break;
                                    case AttributeControlType.ColorSquares:
                                        {
                                            <ul data-attr="@(attribute.Id)" class="option-list attribute-squares color-squares" id="color-squares-@(attribute.Id)">
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                                        <label for="@(controlId)_@(attributeValue.Id)">
                                                            <span class="attribute-square-container" title="@attributeValue.Name">
                                                                <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                                            </span>
                                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                                        </label>
                                                        <div class="tooltip-container">
                                                            <div class="not-available-text">@T("NopStation.Plugin.Misc.QuoteCart.FormAttributes.NotAvailable")</div>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                            <script asp-location="Footer">
                                                $(function () {
                                                    $('.attributes #color-squares-@(attribute.Id)').on('click', 'input', function (event) {
                                                        $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                                        $(this).closest('li').addClass('selected-value');
                                                    });
                                                });
                                            </script>
                                        }
                                        break;
                                    case AttributeControlType.ImageSquares:
                                        {
                                            <ul data-attr="@(attribute.Id)" class="option-list attribute-squares image-squares" id="image-squares-@(attribute.Id)">
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                                        <label for="@(controlId)_@(attributeValue.Id)">
                                                            <span class="attribute-square-container">
                                                                <span class="attribute-square" style="background: url('@(attributeValue.ImageSquaresPictureModel.ImageUrl)') 50% 50% no-repeat;">&nbsp;</span>
                                                            </span>
                                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                                        </label>
                                                        <div class="tooltip-container">
                                                            <div class="tooltip-header">@attributeValue.Name</div>
                                                            <div class="tooltip-body"><img src="@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)" alt="@attributeValue.Name" /></div>
                                                            <div class="not-available-text">@T("NopStation.Plugin.Misc.QuoteCart.FormAttributes.NotAvailable")</div>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                            <script asp-location="Footer">
                                                $(function () {
                                                    $('.attributes #image-squares-@(attribute.Id)').on('click', 'input', function (event) {
                                                        $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                                        $(this).closest('li').addClass('selected-value');
                                                    });
                                                });
                                            </script>
                                        }
                                        break;
                                }

                            </dd>
                        }
                    </dl>
                </div>
            </div>
            <div class="buttons">
                <button type="button" id="quote-form-button-@Model.Id" name="send-email" class="quote-submit-btn button-1 quote-form-button">@(string.IsNullOrEmpty(Model.SubmitButtonText) ? T("NopStation.Plugin.Misc.QuoteCart.Form.Buttons.SubmitQuote") : Model.SubmitButtonText)</button>
            </div>
        </form>
    </div>

</div>
<script asp-location="Footer">
    $(function () {
        $("#quote-form-button-@Model.Id").click(function () {
            var inputData = new FormData(document.getElementById("DynamicQuoteForm-@Model.Id"));

            $.ajax({
                cache: false,
                url: "@Url.Action("AddQuoteRequest", "QuoteCart", new { formId = Model.Id })",
                type: "POST",
                data: inputData,
                processData: false,
                contentType: false,
                error: function (error) {
                    displayBarNotification(error?.message ?? "Error submitting quote!", 'error', 3500);
                },
                success: function (data) {
                    if (data.success && data.redirect) {
                        $("#DynamicQuoteForm-@Model.Id").hide();
                        setLocation(data.redirect);
                    }
                    else if (data.message.length) {
                        $("#error-@Model.Id").html(`<span>${data.message.split(',').join('<br />')}</span>`);
                    } else {
                        displayBarNotification(data?.message ?? "Error submitting quote!", 'error', 3500);
                    }
                }
            });
        });
    });
</script>

@if (Model.QuoteFormAttributes.Count > 0)
{
    var attributesHaveConditions = Model.QuoteFormAttributes.Any(x => x.HasCondition);
    var attributeChangeScriptsBuilder = new StringBuilder();
    var attributeChangeHandlerFuncName = $"attribute_change_handler_{Model.Id}";

    foreach (var attribute in Model.QuoteFormAttributes)
    {
        var controlId = $"{QuoteCartDefaults.FormFieldPrefix}{attribute.Id}";
        switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
                {
                    attributeChangeScriptsBuilder.AppendFormat("$('#{0}').on('change', function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName);
                }
                break;
            case AttributeControlType.RadioList:
            case AttributeControlType.ColorSquares:
            case AttributeControlType.ImageSquares:
                {
                    foreach (var attributeValue in attribute.Values)
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                    }
                }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
                {
                    foreach (var attributeValue in attribute.Values)
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                    }
                }
                break;
            default:
                break;
        }
    }


    //render scripts
    //almost the same implementation is used in the \Views\Product\_RentalInfo.cshtml file
    <script asp-location="Footer">
        function @(attributeChangeHandlerFuncName)() {
            $.ajax({
                cache: false,
                url: "@Html.Raw(Url.Action("QuoteForm_AttributeChange", "QuoteCart", new { formId = Model.Id, validateAttributeConditions = attributesHaveConditions }))",
                data: $('#DynamicQuoteForm-@Model.Id').serialize(),
                type: "POST",
                success: function (data, textStatus, jqXHR) {
                    if (data.enabledAttributeMappingIds) {
                        for (var i = 0; i < data.enabledAttributeMappingIds.length; i++) {
                            $('#@($"{QuoteCartDefaults.FormFieldPrefix}label")_' + data.enabledAttributeMappingIds[i]).show();
                            $('#@($"{QuoteCartDefaults.FormFieldPrefix}inputwrap")_' + data.enabledAttributeMappingIds[i]).show();
                        }
                    }
                    if (data.disabledAttributeMappingIds) {
                        for (var i = 0; i < data.disabledAttributeMappingIds.length; i++) {
                            $('#@($"{QuoteCartDefaults.FormFieldPrefix}label")_' + data.disabledAttributeMappingIds[i]).hide();
                            $('#@($"{QuoteCartDefaults.FormFieldPrefix}inputwrap")_' + data.disabledAttributeMappingIds[i]).hide();
                        }
                    }
                    if (data.message) {
                        alert(data.message);
                    }
                    $(document).trigger({ type: "quoteform_attributes_changed", changedData: data });
                }
            });
        }
        $(function () {
            @(attributeChangeHandlerFuncName)();
            @Html.Raw(attributeChangeScriptsBuilder.ToString())
        });
    </script>
}