@model StoreLocatorModel

@using System.Linq;
@using Newtonsoft.Json
@using Nop.Web.Extensions;

@{
    ViewBag.PageTitle = T("NopStation.StoreLocator.StoreLocations.Title").Text;
    Layout = "_ColumnsOne";

    NopHtml.AppendCssFileParts("/Plugins/NopStation.Plugin.Widgets.StoreLocator/Content/css/styles.css",string.Empty);
}

@if (Model.LocationsModel.Locations.Count() == 0)
{
    <script asp-location="Footer">
        function initMap() {
            //initial setup
            var latitude = "";
            var longitude = "";
            var Name = "";
            var marker = "";
            if (latitude == "" && longitude == "") {
                latitude = -36.83527127030034;
                longitude = 174.57931050390624;
                Name = "Default Position";
            }
            var pos = new google.maps.LatLng(latitude, longitude);
            var map = new google.maps.Map(document.getElementById('map'), {
                center: pos,
                zoom: 5
            });
            var infowindow = new google.maps.InfoWindow();
            infowindow.close();
        }
    </script>
}
else
{
<script asp-location="Footer">
        var x = 10;
        var viewModel = @Html.Raw(@JsonConvert.SerializeObject(Model.LocationsModel));
        var infowindow;
        function initMap() {
            var latitude = "";
            var longitude = "";
            var markers = new Array();

            if (latitude == "" && longitude == "") {
                latitude = 23.7812697;
                longitude = 90.40000379999992;
                Name = "@T("NopStation.StoreLocator.MapMarker.DefaultPosition")";
                $('#lat').val(latitude);
                $('#lng').val(longitude);
            }

            var pos = new google.maps.LatLng(viewModel.Locations[0].Latitude, viewModel.Locations[0].Longitude);

            var map = new google.maps.Map(document.getElementById('map'), {
                center: pos,
                zoom: 9
            });

            for (var i = 0; i < viewModel.Locations.length; i++) {
                pos = new google.maps.LatLng(viewModel.Locations[i].Latitude, viewModel.Locations[i].Longitude);

                var marker = new google.maps.Marker({
                    position: pos,
                    map: map,
                    title: viewModel.Locations[i].Name
                });

                var content =
                    "<div id='content'>" +
                        "<div id='bodyContent'>"+
                            "<table>" +
                                "<tr>" +
                                    "<td colspan='2' style='text-align: center; color:black;'><b>" + viewModel.Locations[i].Name + "</b></td>"+
                                "</tr>" +
                                "<tr>"+
                                    "<td style='width:30%;'>&nbsp;</td>"+
                                    "<td style='width:70%;' align='right'>&nbsp;</td>"+
                                "</tr>"+
                                "<tr>"+
                                    "<td style='width:30%; color:black;padding-bottom:5px'><b> @T("NopStation.StoreLocator.MapMarker.Address") </b></td>"+
                                    "<td style='width:70%;color:black;padding-bottom:5px;' align='right'>" + viewModel.Locations[i].FullAddress + "</td>" +
                                "</tr>" +
                                "<tr>"+
                                    "<td style='width:30%; color:black;padding-bottom:5px'><b> @T("NopStation.StoreLocator.MapMarker.OpeningHours") </b></td>"+
                                    "<td style='width:70%;color:black;padding-bottom:5px;' align='right'>" + viewModel.Locations[i].OpeningHours + "</td>" +
                                "</tr>" +
                                "<tr>" +
                                    "<td style='width:30%; color:black;padding-bottom:5px'><b> @T("NopStation.StoreLocator.MapMarker.PhoneNumber")</b></td>" +
                                    "<td style='width:70%;color:black;padding-bottom:5px;' align='right'>" + viewModel.Locations[i].PhoneNumber + "</td>" +
                                "</tr>" +
                            "</table>" +
                        "</div>" +
                    "</div>";

                google.maps.event.addListener(marker, 'click', (function (marker, markercontent) {
                    return function () {
                        placeMarker(marker.position, markercontent, marker);
                    };
                })(marker, content));

                markers.push(marker);
            }

            function placeMarker(location, markercontent, marker) {
                if (!marker || !marker.setPosition) {
                    marker = new google.maps.Marker({
                        position: location,
                        map: map,
                    });
                } else {
                    marker.setPosition(location);
                }
                if (!!infowindow && !!infowindow.close) {
                    infowindow.close();
                }
                infowindow = new google.maps.InfoWindow({
                    content: markercontent
                });
                infowindow.open(map, marker);
            }

            $('.marker-link').on('click', function () {
                $("html, body").animate({ scrollTop: 0 }, 600);

                map.setZoom(10);

                setTimeout(function (cmarker) { google.maps.event.trigger(cmarker, 'click'); }, 1000, markers[$(this).data('markerid')]);

                setTimeout(function (map, position) { map.panTo(position); }, 1500, map, markers[$(this).data('markerid')].position);
                setTimeout(function (map) { smoothZoom(map, 15, map.getZoom()); }, 1500, map);
            });

            // the smooth zoom function
            function smoothZoom(map, max, cnt) {
                if (cnt >= max) {
                    return;
                } else {
                    z = google.maps.event.addListener(map, 'zoom_changed', function (event) {
                        google.maps.event.removeListener(z);
                        smoothZoom(map, max, cnt + 1);
                    });
                    setTimeout(function () {
                        map.setZoom(cnt)
                    }, 80);
                }
            }
        }
</script>
}

<script asp-location="Footer" src="https://maps.googleapis.com/maps/api/js?key=@Model.GoogleMapApiKey&libraries=places&callback=initMap" async defer></script>

<script asp-location="Footer">
    $(document).ready(function () {
        var showChar = 100;
        var ellipsestext = "...";
        var moretext = "@T("NopStation.StoreLocator.MapMarker.SeeMore")";
        var lesstext = "@T("NopStation.StoreLocator.MapMarker.SeeLess")";
        $('.more').each(function () {
            var content = $(this).html();
            if (content.length > showChar) {
                var c = content.substr(0, showChar);
                var h = content.substr(showChar - 1, content.length - showChar);
                var html = c + '<span class="moreelipses">' + ellipsestext + '</span>&nbsp;<span class="morecontent"><span>' + h + '</span>&nbsp;&nbsp;<a href="" class="morelink">' + moretext + '</a></span>';
                $(this).html(html);
            }
        });

        $(".morelink").click(function () {
            if ($(this).hasClass("less")) {
                $(this).removeClass("less");
                $(this).html(moretext);
            } else {
                $(this).addClass("less");
                $(this).html(lesstext);
            }
            $(this).parent().prev().toggle();
            $(this).prev().toggle();
            return false;
        });
    });
</script>

<div class="page-body">
    <div class="all-stores">
        <div class="store-map">
            <div id="map"></div>
        </div>
        <hr />
        <div class="total-stores">
            <h2>@T("NopStation.StoreLocator.StoreLocations.TotalStores", Model.LocationsModel.TotalItems)</h2>
        </div>
        <div class="storelist">
            @if (Model.LocationsModel.Locations.Any())
            {
                int i = 0;
                foreach (var item in Model.LocationsModel.Locations)
                {
                    <div class="store">
                        <div class="image">
                            <img class="displayImage marker-link" data-markerid="@i" src=@item.ImageUrl alt="Image" />
                        </div>
                        <div class="store-details">
                            <div class="store-name">
                                <a href="@Url.RouteUrl("GenericUrl", new { genericSeName = item.SeName })">
                                    <label class="marker-link" data-markerid="@i" style="cursor:pointer">@item.Name</label>
                                </a>
                            </div>
                            <div class="full-address">
                                <span>@item.FullAddress@item.FormattedAddress</span>
                            </div>
                            <div class="opening-hours">
                                <span>@Html.Raw(@item.OpeningHours)</span>
                            </div>
                            <div class="contact-number">
                                <a href="tel:@item.PhoneNumber">@item.PhoneNumber</a>
                            </div>
                            <div class="email-address">
                                <a href="mailto:@item.Email">@item.Email</a>
                            </div>
                            @if (!string.IsNullOrEmpty(item.ShortDescription))
                            {
                                <div class="short-description" itemprop="description">
                                    @Html.Raw(item.ShortDescription)
                                </div>
                            }
                            <div class="store-btn-container">
                                @if (!string.IsNullOrEmpty(item.GoogleMapLocation))
                                {
                                    <a class="btn-store-map" target="_blank" href="@item.GoogleMapLocation"><i class="fa fa-map-marker"></i> @T("NopStation.StoreLocator.StoreLocations.ShowInMap")</a>
                                }
                            </div>
                        </div>
                    </div>
                    i++;
                }
            }
            else
            { 
                <span>@T("NopStation.StoreLocator.NoStores")</span>
            }
        </div>
    </div>
    @{
        var pager = Html.Pager(Model.LocationsModel).QueryParam("pagenumber");
    }
    @if (!await pager.IsEmpty())
    {
        <div class="pager">
            @pager
        </div>
    }
</div>