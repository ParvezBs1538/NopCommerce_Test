@model Product360Model

@{
    const string hidePicture360BlockAttributeName = "PictureMappingPage.HidePictureMappingBlock";
    var hidePicture360Block = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hidePicture360BlockAttributeName);

    const string hideSetting360BlockAttributeName = "PictureMappingPage.HidePictureSettingBlock";
    var hideSetting360Block = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSetting360BlockAttributeName);
    var productId = Model?.Id;
    var imageSettingId = Model.ImageSetting360Model?.Id;
}

<div class="form-horizontal">
    <nop-cards id="product-cards">
       <nop-card asp-name="product360-pictures" asp-icon="fas fa-image" asp-title="Pictures for 360 View" asp-hide-block-attribute-name="@hidePicture360BlockAttributeName" asp-hide="@hidePicture360Block" asp-advanced="false">
            <div class="card-body">
                <nop-tabs id="product360-view-edit" asp-tab-name-to-select="tab-360-pictures" asp-render-selected-tab-input="false">
                    <nop-tab asp-name="tab-360-pictures" asp-title="@T("Plugins.Widgets.Product360View.360Picture")" asp-default="true">
                        <div class="card-body">
                            @await Html.PartialAsync("Table", new DataTablesModel
                            {
                                Name = "pictures360-grid",
                                UrlRead = new DataUrl("Product360PictureList", "WidgetsProduct360View", new RouteValueDictionary { [nameof(Model.ProductPictureSearchModel.ProductId)] = Model.ProductPictureSearchModel.ProductId, [nameof(Model.ProductPictureSearchModel.IsPanorama)] = false }),
                                UrlDelete = new DataUrl("Product360PictureDelete", "WidgetsProduct360View", null),
                                UrlUpdate = new DataUrl("Product360PictureUpdate", "WidgetsProduct360View", null),
                                Length = Model.ProductPictureSearchModel.PageSize,
                                LengthMenu = Model.ProductPictureSearchModel.AvailablePageSizes,
                                ColumnCollection = new List<ColumnProperty>
                                {
                                    new ColumnProperty(nameof(ProductPicture360Model.PictureUrl))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.PictureId").Text,
                                        Render = new RenderCustom("renderPicturesColumnProductPictureUrl")
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.DisplayOrder))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.DisplayOrder").Text,
                                        Width = "150",
                                        ClassName = NopColumnClassDefaults.CenterAll,
                                        Editable = true,
                                        EditType = EditType.Number
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.OverrideAltAttribute))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.OverrideAltAttribute").Text,
                                        Width = "200",
                                        Editable = true,
                                        EditType = EditType.String
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.OverrideTitleAttribute))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.OverrideTitleAttribute").Text,
                                        Width = "200",
                                        Editable = true,
                                        EditType = EditType.String
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.Id))
                                    {
                                        Title = T("Admin.Common.Edit").Text,
                                        Width = "200",
                                        ClassName =  NopColumnClassDefaults.Button,
                                        Render = new RenderButtonsInlineEdit()
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.Id))
                                    {
                                        Title = T("Admin.Common.Delete").Text,
                                        Width = "100",
                                        Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
                                        ClassName = NopColumnClassDefaults.Button
                                    }
                                }
                            })
        
                            <script>
                                function renderPicturesColumnProductPictureUrl(data, type, row, meta) {
                                    return '<a href="' + row.PictureUrl + '" target="_blank"><img alt="' + row.PictureId + '" src="' + row.PictureUrl + '" width="150" /></a>';
                                }
                            </script>

                            <div class="card card-default">
                                <div class="card-header">
                                    @T("Admin.Catalog.Products.Multimedia.Pictures.AddNew")
                                </div>
                                <div class="card-body">
                                    <div class="form-group row">
                                        @{
                                            ViewData["Endpoint"] = this.Url.Action("Product360PictureAdd", "WidgetsProduct360View", new { productId = Model.Id, isPanorama = false });
                                            ViewData["TableSelector"] = "#pictures360-grid";
                                        }
                                        <div class="col-md-3">
                                            <nop-label asp-for="AddPictureModel.PictureId" />
                                        </div>
                                        <div class="col-md-9">
                                            <nop-editor asp-for="AddPictureModel.PictureId" />
                                            <span asp-validation-for="AddPictureModel.PictureId"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </nop-tab>

                    <nop-tab asp-name="panorama-pictures" asp-title="@T("Plugins.Widgets.Product360View.PanoramaPicture")">
                        <div class="card-body">
                            @await Html.PartialAsync("Table", new DataTablesModel
                            {
                                Name = "panorama-pictures-grid",
                            UrlRead = new DataUrl("Product360PictureList", "WidgetsProduct360View", new RouteValueDictionary { [nameof(Model.ProductPictureSearchModel.ProductId)] = Model.ProductPictureSearchModel.ProductId, [nameof(Model.ProductPictureSearchModel.IsPanorama)] = true }),
                                UrlDelete = new DataUrl("Product360PictureDelete", "WidgetsProduct360View", null),
                                UrlUpdate = new DataUrl("Product360PictureUpdate", "WidgetsProduct360View", null),
                                Length = Model.ProductPictureSearchModel.PageSize,
                                LengthMenu = Model.ProductPictureSearchModel.AvailablePageSizes,
                                ColumnCollection = new List<ColumnProperty>
                                {
                                    new ColumnProperty(nameof(ProductPicture360Model.PictureUrl))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.PictureId").Text,
                                        Render = new RenderCustom("renderPicturesColumnProductPictureUrl")
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.DisplayOrder))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.DisplayOrder").Text,
                                        Width = "150",
                                        ClassName = NopColumnClassDefaults.CenterAll,
                                        Editable = true,
                                        EditType = EditType.Number
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.OverrideAltAttribute))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.OverrideAltAttribute").Text,
                                        Width = "200",
                                        Editable = true,
                                        EditType = EditType.String
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.OverrideTitleAttribute))
                                    {
                                        Title = T("Plugins.Widgets.Product360View.Fields.OverrideTitleAttribute").Text,
                                        Width = "200",
                                        Editable = true,
                                        EditType = EditType.String
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.Id))
                                    {
                                        Title = T("Admin.Common.Edit").Text,
                                        Width = "200",
                                        ClassName =  NopColumnClassDefaults.Button,
                                        Render = new RenderButtonsInlineEdit()
                                    },
                                    new ColumnProperty(nameof(ProductPicture360Model.Id))
                                    {
                                        Title = T("Admin.Common.Delete").Text,
                                        Width = "100",
                                        Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
                                        ClassName = NopColumnClassDefaults.Button
                                    }
                                }
                            })
        
                            <script>
                                function renderPicturesColumnProductPictureUrl(data, type, row, meta) {
                                    return '<a href="' + row.PictureUrl + '" target="_blank"><img alt="' + row.PictureId + '" src="' + row.PictureUrl + '" width="150" /></a>';
                                }
                            </script>

                            <div class="card card-default">
                                <div class="card-header">
                                    @T("Admin.Catalog.Products.Multimedia.Pictures.AddNew")
                                </div>
                                <div class="card-body">
                                    <div class="form-group row">
                                        @{
                                            ViewData["Endpoint"] = this.Url.Action("PanoramaPictureAdd", "WidgetsProduct360View", new { productId = Model.Id });
                                            ViewData["TableSelector"] = "#panorama-pictures-grid";
                                        }
                                        <div class="col-md-3">
                                            <nop-label asp-for="AddPictureModel.PictureId" />
                                        </div>
                                        <div class="col-md-9">
                                            <nop-editor asp-for="AddPictureModel.PictureId" />
                                            <span asp-validation-for="AddPictureModel.PictureId"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </nop-tab>
                </nop-tabs>
            </div>
        </nop-card>

        <nop-card asp-name="product360-settings" asp-icon="fas fa-cogs" asp-title="Settings for 360 View" asp-hide-block-attribute-name="@hideSetting360BlockAttributeName" asp-hide="@hideSetting360Block" asp-advanced="false">

            <div class="card-body">
                <div class="form-group row">
                    <div class="col-md-3">
                        <nop-label asp-for="ImageSetting360Model.IsEnabled" />
                    </div>
                    <div class="col-md-9">
                        <nop-editor asp-for="ImageSetting360Model.IsEnabled" />
                        <span asp-validation-for="ImageSetting360Model.IsEnabled"></span>
                    </div>
                </div>
                <nop-nested-setting asp-for="ImageSetting360Model.IsEnabled">
                    <div class="form-group row">
                        <div class="col-md-3">
                            <nop-label asp-for="ImageSetting360Model.IsPanoramaEnabled" />
                        </div>
                        <div class="col-md-9">
                            <nop-editor asp-for="ImageSetting360Model.IsPanoramaEnabled" />
                            <span asp-validation-for="ImageSetting360Model.IsPanoramaEnabled"></span>
                        </div>
                    </div>
                    <div class="div-360-settings">
                        <div class="form-group row">
                            <div class="col-md-3">
                                <nop-label asp-for="ImageSetting360Model.IsZoomEnabled" />
                            </div>
                            <div class="col-md-9">
                                <nop-editor asp-for="ImageSetting360Model.IsZoomEnabled" />
                                <span asp-validation-for="ImageSetting360Model.IsZoomEnabled"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <nop-label asp-for="ImageSetting360Model.IsLoopEnabled" />
                        </div>
                        <div class="col-md-9">
                            <nop-editor asp-for="ImageSetting360Model.IsLoopEnabled" />
                            <span asp-validation-for="ImageSetting360Model.IsLoopEnabled"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <nop-label asp-for="ImageSetting360Model.BehaviorTypeId" />
                        </div>
                        <div class="col-md-9">
                            <nop-select asp-for="ImageSetting360Model.BehaviorTypeId" asp-items="@await (((BehaviorType)Model.ImageSetting360Model.BehaviorTypeId).ToSelectListAsync())" />
                            <span asp-validation-for="ImageSetting360Model.BehaviorTypeId"></span>
                        </div>
                    </div>
                    
                </nop-nested-setting>
                <div class="form-group row">
                    <div class="col-md-9 offset-md-3">
                        <button type="button" id="update-setting" class="btn btn-primary">@T("Admin.Common.Save")</button>
                    </div>
                </div>
            </div>

        </nop-card>
    </nop-cards>
</div>

<script>
    $(document).ready(function () {
        function toggleProduct360ImageSettingVisibility() {
            var isEnabledCheckbox = $("#ImageSetting360Model_IsPanoramaEnabled");
            var product360ImageSettingDiv = $(".div-360-settings");

            if (isEnabledCheckbox.prop("checked")) {
                product360ImageSettingDiv.hide();
            } else {
                product360ImageSettingDiv.show();
            }
        }

        toggleProduct360ImageSettingVisibility();
        $("#ImageSetting360Model_IsPanoramaEnabled").on("change", toggleProduct360ImageSettingVisibility);

        $("#update-setting").click(function () {
            var IsEnabled = $('#@Html.IdFor(e=>e.ImageSetting360Model.IsEnabled)').is(':checked');
            var IsLoopEnabled = $('#@Html.IdFor(e=>e.ImageSetting360Model.IsLoopEnabled)').is(':checked');
            var IsZoomEnabled = $('#@Html.IdFor(e=>e.ImageSetting360Model.IsZoomEnabled)').is(':checked');
            var IsPanoramaEnabled = $('#@Html.IdFor(e=>e.ImageSetting360Model.IsPanoramaEnabled)').is(':checked');
            var BehaviorTypeId = $('#@Html.IdFor(e=>e.ImageSetting360Model.BehaviorTypeId)').val();
            var json = {
                IsEnabled: IsEnabled,
                IsLoopEnabled: IsLoopEnabled,
                IsZoomEnabled: IsZoomEnabled,
                IsPanoramaEnabled: IsPanoramaEnabled,
                BehaviorTypeId: BehaviorTypeId,
                ProductId: @productId,
                Id: @imageSettingId
             };
             var success = false;
            addAntiForgeryToken(json);

            $.ajax({
                type: "POST",
                url: '@Url.Action("ProductImageSettingAddOrUpdate", "WidgetsProduct360View")',
                data: json,
                success: function (data) {
                    alert("Image Setting successfully saved");
                    success = true;
                }
            });
        });
    });
</script>
